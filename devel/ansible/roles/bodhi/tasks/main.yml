---
- name: Install packages
  dnf:
    name:
      - bash-completion
      - cmake
      - createrepo_c
      - docker
      - docker-compose
      - expat-devel
      - fedora-messaging
      - freetype-devel
      - gcc
      - git
      - graphviz
      - htop
      - httpie
      - libffi-devel
      - libjpeg-devel
      - libjpeg-turbo-devel
      - libxml2-devel
      - make
      - nmap-ncat
      - openssl-devel
      - pcaro-hermit-fonts
      - pcp-system-tools
      - pre-commit
      - poetry
      - postgresql-devel
      - postgresql-server
      - python3-alembic
      - python3-arrow
      - python3-authlib
      - python3-backoff
      - python3-bleach
      - python3-bugzilla
      - python3-celery
      - python3-click
      - python3-colander
      - python3-conu
      - python3-cornice
      - python3-createrepo_c
      - python3-devel
      - python3-diff-cover
      - python3-dogpile-cache
      - python3-faker
      - python3-flake8
      - python3-flake8-import-order
      - python3-freeipa
      - python3-ipdb
      - python3-koji
      - python3-librepo
      - python3-markdown
      - python3-mypy
      - python3-munch
      - python3-openid
      - python3-pip
      - python3-prometheus_client
      - python3-psycopg2
      - python3-pydocstyle
      - python3-pylibravatar
      - python3-pymediawiki
      - python3-pyramid
      - python3-pyramid-fas-openid
      - python3-pytest
      - python3-pytest-cov
      - python3-pytest-mock
      - python3-responses
      - python3-rpdb
      - python3-setuptools
      - python3-sphinx
      - python3-sqlalchemy
      - python3-sqlalchemy_schemadisplay
      - python3-webtest
      - redhat-rpm-config
      - screen
      - skopeo
      - tmux
      - tree
      - vim-enhanced
      - zlib-devel
      # Auth
      - httpd
      - mod_ssl
      - ipa-client
    state: present

- name: Install krb5-devel with yum
  yum:
    name: krb5-devel
    state: present

- name: Initialize PostgreSQL
  command: postgresql-setup initdb
  args:
      creates: /var/lib/pgsql/data/pg_hba.conf

- replace:
    dest: /var/lib/pgsql/data/pg_hba.conf
    regexp: "host    all             all             127.0.0.1/32            ident"
    replace: "host    all             all             127.0.0.1/32            trust"

- replace:
    dest: /var/lib/pgsql/data/pg_hba.conf
    regexp: "host    all             all             ::1/128                 ident"
    replace: "host    all             all             ::1/128                 trust"

- service:
    name: postgresql
    state: started
    enabled: yes

- name: Create a database for Bodhi
  shell: runuser -l postgres -c 'createdb bodhi2' && touch /home/vagrant/.db-created
  args:
      creates: /home/vagrant/.db-created

# This isn't packaged in Fedora yet, but it's only a development tool (we should still add it)
- name: pip install debugtoolbar
  pip:
      name: pyramid_debugtoolbar

- name: pip install jinja2-cli
  pip:
      name: jinja2-cli

- name: Fake a pungi install
  file:
    src: /usr/bin/true
    dest: /usr/bin/pungi-koji
    state: link

- name: Get Python 3 version
  command: python3 -c "import sys; print('%s.%s' % sys.version_info[0:2])"
  register: python3_version

- name: Create a directory for the virtualenv
  file:
    name: /srv/venv
    state: directory
    mode: 0755
    owner: vagrant
    group: vagrant

- name: Create the virtualenv
  command: virtualenv --system-site-packages /srv/venv/
  become: yes
  become_user: vagrant
  args:
    creates: /srv/venv/bin/python

- name: Install bodhi with poetry
  command: poetry install
  become: yes
  become_user: vagrant
  args:
      chdir: /home/vagrant/bodhi/{{ item }}
  environment:
    VIRTUAL_ENV: /srv/venv
  loop:
    - bodhi-messages
    - bodhi-client
    - bodhi-server

- name: Retrieve database dump
  get_url:
      url: https://infrastructure.fedoraproject.org/infra/db-dumps/bodhi2.dump.xz
      dest: /tmp/bodhi2.dump.xz
      timeout: 1000

- name: Import database
  shell: xzcat /tmp/bodhi2.dump.xz | runuser -l postgres -c 'psql bodhi2' && touch /home/vagrant/.db-imported
  args:
      creates: /home/vagrant/.db-imported

- name: Copy bodhi config file to vagrant home
  command: cp /home/vagrant/bodhi/devel/development.ini.example /home/vagrant/development.ini
  args:
      creates: /home/vagrant/development.ini

- name: Set bodhi config path in system env
  lineinfile:
    path: /etc/environment
    state: present
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value}}"
  with_items:
    - {key: "BODHI_CONFIG", value: "/home/vagrant/development.ini"}

- name: Adjust settings in the config
  ini_file:
    path: /home/vagrant/development.ini
    section: app:main
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  loop:
    - {key: "celery_config", value: "%(here)s/bodhi/bodhi-server/celeryconfig.py"}
    - {key: "pungi.basepath", value: "%(here)s/bodhi/devel/ci/integration/bodhi/"}
    - {key: "smtp_server", value: "tinystage.tinystage.test:1025"}

- name: Creates /etc/bodhi directory
  file:
    path: /etc/bodhi
    state: directory

- name: Apply database migrations
  become: yes
  become_user: vagrant
  command: poetry run alembic -c alembic.ini upgrade head
  args:
      chdir: /home/vagrant/bodhi/bodhi-server
  environment:
      VIRTUAL_ENV: /srv/venv
      BODHI_CONFIG: /home/vagrant/development.ini

- name: Install the systemd unit files
  copy:
      src: "{{ item }}"
      dest: /etc/systemd/system/{{ item }}
      mode: 0644
  with_items:
      - bodhi.service
      - celery.service

- name: Install the .bashrc
  copy:
      src: .bashrc
      dest: /home/vagrant/.bashrc
      mode: 0644
      owner: vagrant
      group: vagrant

- name: Install the .vimrc
  copy:
      src: .vimrc
      dest: /home/vagrant/.vimrc
      mode: 0644
      owner: vagrant
      group: vagrant

- name: Install the motd
  copy:
      src: motd
      dest: /etc/motd
      mode: 0644

- name: create the composes directories
  file:
      path: "/srv/{{item}}"
      owner: vagrant
      group: vagrant
      state: directory
  with_items:
      - composes
      - composes/final
      - composes/stage

- name: Copy the fedora-messaging configuration file bodhi.toml
  copy:
      src: bodhi.toml
      dest: /etc/fedora-messaging/config.toml
      owner: root
      group: root
      mode: 644

- name: Link the bodhi bash completion script
  file:
     src: /home/vagrant/bodhi/bodhi-client/bodhi-client.bash
     dest: /etc/bash_completion.d/bodhi-client.bash
     state: link

# Auth

- name: Enroll system as IPA client
  shell:
    cmd: ipa-client-install --hostname {{ ansible_fqdn }} --domain tinystage.test --realm {{ krb_realm }} --server ipa.tinystage.test -p {{ ipa_admin_user }} -w {{ ipa_admin_password }} -U -N --force-join
    creates: /etc/ipa/default.conf

- name: pip install oidc-register
  pip:
      name: oidc-register
      executable: pip3

- name: Get the content of the CA cert
  slurp:
    src: /etc/ipa/ca.crt
  register: ca_crt

- name: Put tinystage root CA in the list of CA's
  blockinfile:
    block: "{{ ca_crt.content | b64decode }}"
    path: "{{ item }}"
  loop:
    - /etc/pki/tls/certs/ca-bundle.crt
    - /usr/local/lib/python{{ python3_version.stdout }}/site-packages/httplib2/cacerts.txt
    - /srv/venv/lib/python{{ python3_version.stdout }}/site-packages/certifi/cacert.pem

- name: Register with Ipsilon
  command: python3 /home/vagrant/bodhi/devel/register-with-ipsilon.py
  register: _ipsilon_registration

- name: Generate and get SSL cert
  shell:
    cmd: ipa-getcert request -f /etc/pki/tls/certs/server.pem -k /etc/pki/tls/private/server.key -K HTTP/{{ ansible_fqdn }} -N {{ ansible_fqdn }}
    creates: /etc/pki/tls/certs/server.pem

- name: Check the cert is there
  wait_for:
    path: /etc/pki/tls/certs/server.pem
    state: present

- name: Check the key is there
  wait_for:
    path: /etc/pki/tls/private/server.key
    state: present

- name: Setup mod_ssl
  lineinfile:
    path: /etc/httpd/conf.d/ssl.conf
    regexp: "^SSLCertificateFile "
    line: SSLCertificateFile /etc/pki/tls/certs/server.pem
- name: Setup mod_ssl
  lineinfile:
    path: /etc/httpd/conf.d/ssl.conf
    regexp: "^SSLCertificateKeyFile "
    line: SSLCertificateKeyFile /etc/pki/tls/private/server.key
- name: Setup mod_ssl
  lineinfile:
    path: /etc/httpd/conf.d/ssl.conf
    insertbefore: "</VirtualHost>"
    regexp: "^RequestHeader set X-Forwarded-Proto https$"
    line: RequestHeader set X-Forwarded-Proto https

- name: Copy the create users and groups script
  template:
      src: create-freeipa-users-grps.py
      dest: /home/vagrant/create-freeipa-users-grps.py
      mode: 0644
      owner: vagrant
      group: vagrant

- name: Add development users to tinystage
  shell: python create-freeipa-users-grps.py > users-creation.log
  args:
    chdir: /home/vagrant/
    creates: users-creation.log

- name: Setup httpd
  copy:
    src: bodhi.httpd.conf
    dest: /etc/httpd/conf.d/bodhi.conf

- name: Allow apache to reverse proxy
  seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes


- name: Start and enable the bodhi-related services
  service:
      name: "{{ item }}"
      state: restarted
      enabled: yes
  with_items:
      - bodhi
      - docker
      - celery

- name: Start enable httpd
  service:
      name: httpd
      state: restarted
      enabled: yes
