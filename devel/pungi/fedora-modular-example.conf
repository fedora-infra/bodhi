# PRODUCT INFO
release_name = 'Fedora-Modular'
release_short = 'Fedora-Modular'
release_version = 'Rawhide'
release_is_layered = False

# GENERAL SETTINGS
bootable = True

variants_file='variants-modular.xml'
#sigkeys = ['FDB19C98', 'E372E838'] # None = unsigned
# We are using unsigned here temporarily for rawhide until we setup
# auto-signing.
#sigkeys = ['a3cc4e62']
sigkeys = [None]

hashed_directories = True

# RUNROOT settings
runroot = True
runroot_channel = 'compose'
runroot_tag = 'module-bootstrap-rawhide'

# PDC settings
pdc_url = 'https://pdc.fedoraproject.org/rest_api/v1'
pdc_insecure = False
pdc_develop = True

# PKGSET
pkgset_source = 'koji' # koji, repos

# PKGSET - KOJI
# pkgset_koji_tag is not used by the modular compose, but Pungi needs this
# option to appear in a config, otherwise it fails. Once this is fixed, we can
# remove this option completely.
pkgset_koji_tag = 'unknown'
pkgset_koji_inherit = False

filter_system_release_packages = False

# GATHER
gather_source = 'module'
gather_method = 'nodeps'
check_deps = False
greedy_method = 'build'

# fomat: [(variant_uid_regex, {arch|*: [repos]})]
# gather_lookaside_repos = []

# GATHER - JSON
# format: {variant_uid: {arch: package: [arch1, arch2, None (for any arch)]}}
#gather_source_mapping = '/path/to/mapping.json'


# CREATEREPO
createrepo_c = True
createrepo_checksum = 'sha256'
createrepo_deltas = False #True

# CHECKSUMS
media_checksums = ['sha256']
media_checksum_one_file = True
media_checksum_base_filename = '%(release_short)s-%(variant)s-%(version)s-%(arch)s-%(date)s%(type_suffix)s.%(respin)s'
#jigdo
create_jigdo = False

# OK, we have the anaconda module now.  Let's try buildinstall, but still skip
# the phases which depend on it.
# NOTE: Added buildinstall and image_build phases
skip_phases= ["buildinstall", "live_media", "image_build" "live_images", "ostree"]

# BUILDINSTALL
buildinstall_method = 'lorax'

# Enables macboot on x86_64 for all variants and disables upgrade image building
# # everywhere.
lorax_options = [
  ('^.*$', {
     'x86_64': {
         'nomacboot': False
     },
     '*': {
         'noupgrade': True
     }
  })
]

# fomat: [(variant_uid_regex, {arch|*: [packages]})]
additional_packages = [

]

filter_packages = [
    # TODO - autogenerate this from the modulemd someday.
]

createiso_skip = [
        ('^base-runtime$', {
            '*': True,
            'src': True
        }),
        ('^Server$', {
            '*': True,
            'src': True
        }),
    ]

# Image name respecting Fedora's image naming policy
image_name_format = '%(release_short)s-%(variant)s-%(disc_type)s-%(arch)s-%(version)s-%(date)s%(type_suffix)s.%(respin)s.iso'
# # Use the same format for volume id
image_volid_formats = [
     '%(release_short)s-%(variant)s-%(disc_type)s-%(arch)s-%(version)s'
     ]
# No special handling for layered products, use same format as for regular images
image_volid_layered_product_formats = []
# Replace 'Cloud' with 'C' in volume id etc.
volume_id_substitutions = {
         'Atomic': 'AH',
        'Rawhide': 'rawh',
         'Images': 'img',
    'MATE_Compiz': 'MATE',
       'Security': 'Sec',
 'Electronic_Lab': 'Elec',
       'Robotics': 'Robo',
 'Scientific_KDE': 'SciK',
  'Astronomy_KDE': 'AstK',
   'Design_suite': 'Dsgn',
          'Games': 'Game',
        'Jam_KDE': 'Jam',
    'Workstation': 'WS',
     'Everything': 'E',
         'Server': 'S',
          'Cloud': 'C',
          'Alpha': 'A',
           'Beta': 'B',
             'TC': 'T',
        'Modular': 'M',
}

disc_types = {
    'boot': 'netinst',
    'live': 'Live',
}

global_ksurl = 'git+https://pagure.io/fedora-kickstarts.git?#HEAD'
global_release = '!RELEASE_FROM_LABEL_DATE_TYPE_RESPIN'
global_version = 'Rawhide'
# live_images ignores this in favor of live_target
global_target = 'module-bootstrap-rawhide'

image_build = {
    '^Server$': [
        {
            'image-build': {
                'format': [('docker', 'tar.xz')],
                'name': 'Fedora-Modular-Docker-Base',
                # https://pagure.io/fedora-kickstarts/pull-request/257
                'kickstart': 'fedora-modular-docker-base-minimal.ks',
                'distro': 'Fedora-27',
                'disk_size': 4,
                'arches': ['x86_64'],
                'install_tree_from': 'Server',
                'subvariant': 'Docker_Base',
            },
            'factory-parameters': {
                'dockerversion': '1.10.1',
                'docker_cmd': '[ "/bin/bash" ]',
                'docker_env': '[ "DISTTAG=f27container_modular", "FGC=f27-modular" ]',
                'docker_label': '{"name": "fedora", "license": "MIT", "vendor": "Fedora Project", "version": "27-modular"}',
            },
        },
        {
            'image-build': {
                'format': [('qcow2','qcow2'), ('raw-xz','raw.xz')],
                'name': 'Fedora-Modular-Server',
                'kickstart': 'fedora-modular-disk-minimal.ks',
                'distro': 'Fedora-27',
                'disk_size': 8,
                'arches': ['x86_64'],
                'repo': 'Server',
                'install_tree_from': 'Server',
                'subvariant': 'Server',
                'failable': ['*'],
             }
        },
    ],
}

translate_paths = [
   ('/mnt/koji/compose/', 'http://kojipkgs.fedoraproject.org/compose/'),
]

failable_deliverables = [
    ('^.*$', {
        # Buildinstall can fail on any variant and any arch
        '*': ['buildinstall', 'iso', 'image-build', 'live-media', 'live', 'ostree', 'ostree-installer'],
        'src': ['buildinstall'],
        # Nothing on i386 blocks the compose
        'i386': ['buildinstall', 'iso', 'live'],
    })
]

koji_profile = 'compose_koji'
