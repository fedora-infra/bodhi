#!/usr/bin/env python3


import os
import subprocess

import click
import yaml


SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
ROOT_DIR = os.path.realpath(os.path.join(SCRIPT_DIR, "../../"))


def get_zuul_config():
    zuul_yaml = os.path.realpath(os.path.join(ROOT_DIR, ".zuul.yaml"))
    with open(zuul_yaml) as stream:
        return yaml.safe_load(stream)


def runcmd(command, **kwargs):
    click.echo(f"Running: {' '.join(command)}")
    subprocess.run(command, stderr=subprocess.STDOUT, universal_newlines=True, check=True, **kwargs)


def run_job(job):
    click.echo(f"Running job {job['name']}")
    ans_env = '{"ansible_user_dir":"/workspace", "zuul":{"project":{"src_dir":"src"}}}'
    ans_local = "--connection=local --inventory 127.0.0.1,"
    nodes = job["nodeset"]["nodes"]
    label = nodes["label"]
    ans_file = os.path.join("/workspace/src", job["run"])
    ans_cmd = (
        f"ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook -v -e '{ans_env}' {ans_local} {ans_file}"
    )
    # Prepare the container
    if label.startswith("pod-"):
        noansible_label = f"{nodes['name']}-noansible"
        dockerfile = os.path.join(SCRIPT_DIR, f"zuul-containers/{label}/Dockerfile")
        runcmd(["podman", "build", "-f", dockerfile, "-t", noansible_label, "."])
        from_image = noansible_label
    elif label.startswith("zuul-"):
        from_image = f"quay.io/software-factory/{label}"
    else:
        click.echo(f"Skipping label {label}")
        return
    # Add Ansible to the container so we can run the tests
    dockerfile_with_ansible = f"FROM {from_image}\nRUN dnf install -y ansible\n"
    runcmd(
        ["podman", "build", "-t", nodes["name"] + "-base", "-f", "-", "."],
        input=dockerfile_with_ansible,
    )
    # Build an image with the prep steps done, so we can cache them
    dockerfile_prep_steps = f"FROM {nodes['name']}-base\nRUN {ans_cmd} -t prep\n"
    runcmd(
        [
            "podman",
            "build",
            "-f",
            "-",
            "-v",
            ROOT_DIR + ":/workspace/src:Z",
            "-t",
            nodes["name"],
            ".",
        ],
        input=dockerfile_prep_steps,
        timeout=None,
    )
    # Run the container
    runcmd(
        [
            "podman",
            "run",
            "-v",
            ROOT_DIR + ":/workspace/src:Z",
            "--rm",
            "-t",
            nodes["name"],
            "sh",
            "-c",
            ans_cmd + " --skip-tags prep",
        ]
    )
    click.echo(f"Done with job {job['name']}")


@click.command()
@click.option("-c", "--checks", "only_checks", multiple=True, help="Only run these checks.")
def main(only_checks):
    try:
        zuul_yaml = get_zuul_config()
    except yaml.YAMLError as exc:
        raise click.ClickException(str(exc))

    checks = [
        check
        for item in zuul_yaml
        if "project" in item
        for check in item["project"]["check"]["jobs"]
    ]
    click.echo("Available zuul checks: {}.".format(", ".join(checks)))
    if only_checks:
        checks = [c for c in checks if c in only_checks]
    if not checks:
        raise click.ClickException("No check selected, aborting.")
    click.echo("Running zuul checks: {}.".format(", ".join(checks)))

    jobs = {item["job"]["name"]: item["job"] for item in zuul_yaml if "job" in item}
    for check in checks:
        job = jobs[check]
        run_job(job)


if __name__ == "__main__":
    main()
