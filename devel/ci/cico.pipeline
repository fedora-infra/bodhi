/**
 * This is Bodhi's Jenkins Pipeline Jenkinsfile.
 *
 * You can read documentation about this file at https://jenkins.io/doc/book/pipeline/jenkinsfile/.
 * A useful list of plugins can be found here: https://jenkins.io/doc/pipeline/steps/.
 */


/**
 * Run the given script on the Duffy node.
 *
 * @param script The script to run on the node.
 */
def onmyduffynode(String script) {
    timestamps {
        sh 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org "' + script + '"'
    }
}


/**
 * rsync the given path from the Duffy node back to the control host.
 *
 * @param rsyncpath The path to be rsync'd back to the control host.
 */
def syncfromduffynode(rsyncpath) {
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' + " ${DUFFY_NODE}.ci.centos.org:~/payload/" + rsyncpath + " ./"
}


/**
 * rsync the given path from the control host to the Duffy node.
 *
 * @param rsyncpath The path to be rsync'd to the Duffy node.
 */
def synctoduffynode(rsyncpath) {
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' +  rsyncpath + " ./ ${DUFFY_NODE}.ci.centos.org:~/payload/"
}


/**
 * Install test dependencies on the Duffy node.
 */
def configure_node = {
    onmyduffynode 'yum -y install epel-release'
    onmyduffynode 'yum install -y docker python36-click python36-pip python36-psycopg2 python36-requests rsync python36-cryptography python36-devel gcc'
    onmyduffynode 'systemctl start docker'
    // To run the integration testsuite
    onmyduffynode 'python3.6 -m pip install \'pytest<4.0\' pytest-cov conu munch fedora-messaging'
}


/**
 * Run the given function up to 5 times (if it fails), with 60 seconds of sleeping in between tries.
 *
 * @param f The function to retry.
 */
def retry_with_sleep = { f ->
    try {
        f()
    } catch (error) {
        retry(4) {
            sleep(60)
            f()
        }
    }
}


/**
 * Run bodhi-ci on the Duffy node for the given arguments.
 *
 * @param release The release to pass to bodhi-ci's -r flag.
 * @param command The subcommand of bodhi-ci to use.
 * @param context This parameter is appended to the release and a dash to form the GitHub context.
 * @param args Any extra arguments to be passed to the command.
 */
def bodhi_ci = { String release, String command, String context, String args ->
    githubNotify context: release + '-' + context, description: 'running', status: 'PENDING'

    try {
        stage(release + '-' + context) {
            timeout(time: 64, unit: 'MINUTES') {
                onmyduffynode 'cd payload && python3.6 ./devel/ci/bodhi-ci ' + command + ' --no-tty -r ' + release + ' ' + args
            }
        }
        githubNotify context: release + '-' + context, status: 'SUCCESS'
    } catch(error) {
        githubNotify context: release + '-' + context, status: 'FAILURE'
        throw error
    }
}


/**
 * Build and test the given release.
 *
 * @param release The release to test.
 */
def test_release = { String release ->
    retry_with_sleep({ bodhi_ci(release, 'build', 'build', '') })
    retry_with_sleep({ bodhi_ci(release, 'integration-build', 'integration-build', '') })

    parallel(
        docs: {bodhi_ci(release, 'docs', 'docs', '--no-build --no-init')},
        flake8: {
            if(release == 'pip') {
                bodhi_ci(release, 'flake8', 'flake8', '--no-build --no-init')
            }
        },
        pydocstyle: {
            if(release == 'pip') {
                bodhi_ci(release, 'pydocstyle', 'pydocstyle', '--no-build --no-init')
            }
        },
        mypy: {
            if(release == 'pip') {
                bodhi_ci(release, 'mypy', 'mypy', '--no-build --no-init')
            }
        },
        unit: {
            bodhi_ci(release, 'unit', 'unit', '--no-build --no-init')
            bodhi_ci(release, 'diff_cover', 'diff-cover', '--no-build --no-init -Z')
        }
    )
}


node('bodhi') {
    checkout scm
    // diff-cover needs to be able to reference origin/develop, so let's just fetch all branches.
    sh 'git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*'
    sh 'git fetch -p --no-tags origin'

    stage('Allocate Duffy node') {
        env.CICO_API_KEY = readFile("${env.HOME}/duffy.key").trim()
        // Get a duffy node and set the DUFFY_NODE and SSID environment variables.
        duffy_rtn=sh(
            script: 'cico --debug node get -f value -c hostname -c comment --retry-count 16 --retry-interval 60',
            returnStdout: true
            ).trim().tokenize(' ')
        env.DUFFY_NODE=duffy_rtn[0]
        env.SSID=duffy_rtn[1]
    }

    try {
        stage('Configure node'){
            retry_with_sleep(configure_node)
        }

        stage('Sync pull request to node') {
            // We don't want test_results files from previous test jobs to stick around.
            sh 'rm -rf test_results'
            synctoduffynode('bodhi')
        }

        // Download the database dumps for the integration tests.
        onmyduffynode 'cd payload && python3.6 ./devel/ci/bodhi-ci integration-download --no-tty'

        def failed = false

        try {
            parallel(
                f31: {test_release('f31')},
                f32: {test_release('f32')},
                pip: {test_release('pip')},
                rawhide: {test_release('rawhide')},
            )
        } catch(error) {
            failed = error
        }

        def releases = ['f31', 'f32', 'pip', 'rawhide']
        for (release in releases) {
            try {
                bodhi_ci(release, 'integration', 'integration', '--no-build --no-init')
            } catch(error) {
                failed = error
            }
        }

        if (failed) {
            throw failed
        }
    } catch (e) {
        currentBuild.result = "FAILURE"
        throw e
    } finally {
        stage('Deallocate node'){
            sh 'cico node done ${SSID}'
        }

        stage('Sync Artifacts'){
            syncfromduffynode('test_results')
        }

        stage('junit'){
            junit(testResults: 'test_results/**/nosetests.xml', allowEmptyResults: true)
        }
    }
}
