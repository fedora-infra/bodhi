"""This module contains generic Pyramid integration with Authlib.

It could be sent to Authlib upstream.
"""

from authlib.integrations.base_client import (
    BaseOAuth,
    FrameworkIntegration,
    OAuthError,
    RemoteApp,
)
from authlib.integrations.requests_client import OAuth1Session, OAuth2Session
from pyramid.httpexceptions import HTTPFound
from pyramid.threadlocal import get_current_registry


class TokenUpdate:
    """Token update event."""

    def __init__(self, name, token, refresh_token, access_token):
        """Initialize the TokenUpdate event.

        Args:
            name (str): The name of the authlib client.
            token (dict): The set of tokens the provider sent us.
            refresh_token (str): The refresh token.
            access_token (str): The access token.
        """
        self.name = name
        self.token = token
        self.refresh_token = refresh_token
        self.access_token = access_token


class PyramidIntegration(FrameworkIntegration):
    """Pyramid-specific framework integration."""

    oauth1_client_cls = OAuth1Session
    oauth2_client_cls = OAuth2Session

    def update_token(self, token, refresh_token=None, access_token=None):
        """Send an event notification on token update with Pyramid's facility."""
        event = TokenUpdate(self.name, token, refresh_token, access_token)
        registry = get_current_registry()
        registry.notify(event)

    def generate_access_token_params(self, request_token_url, request):
        """Generate parameters for fetching access token from the request.

        :param request_token_url: Request Token endpoint for OAuth 1
        :param request: The Pyramid request.

        :raise: OAuthError

        :return: The dict of the parameters for fetching access token.
        """
        if request_token_url:
            return dict(request.GET)

        if request.method == 'GET':
            error = request.GET.get('error')
            if error:
                description = request.GET.get('error_description')
                raise OAuthError(error=error, description=description)

            params = {
                'code': request.GET.get('code'),
                'state': request.GET.get('state'),
            }
        else:
            params = {
                'code': request.POST.get('code'),
                'state': request.POST.get('state'),
            }
        return params

    @staticmethod
    def load_config(oauth, name, params):
        """Load the config from Pyramid's config and the json file generated by oidc-register.

        :param oauth: The OAuth app (unused).
        :param name: The provider name.
        :param params: Additional parameters (unused).

        :return: Dict configuration used to create the OAuth client.
        """
        registry = get_current_registry()
        supported_keys = (
            "client_id", "client_secret", "server_metadata_url", "userinfo_endpoint",
            "authorize_url", "access_token_url",
        )
        config = {}
        for key in supported_keys:
            try:
                config[key] = registry.settings[f"oidc.{name}.{key}"]
            except KeyError:
                continue
        return config


class PyramidRemoteApp(RemoteApp):
    """A Pyramid-specific remote app."""

    def authorize_redirect(self, request, redirect_uri=None, **kwargs):
        """Create a HTTP Redirect for Authorization Endpoint.

        :param request: HTTP request instance from Pyramid view.
        :param redirect_uri: Callback or redirect URI for authorization.
        :param kwargs: Extra parameters to include.
        :return: A HTTP redirect response.
        """
        rv = self.create_authorization_url(redirect_uri, **kwargs)
        self.save_authorize_data(request, redirect_uri=redirect_uri, **rv)
        return HTTPFound(location=rv['url'])

    def authorize_access_token(self, request, **kwargs):
        """Fetch access token in one step.

        :param request: HTTP request instance from Pyramid view.
        :return: A token dict.
        """
        params = self.retrieve_access_token_params(request)
        params.update(kwargs)
        token = self.fetch_access_token(**params)
        if 'id_token' in token:
            userinfo = self.parse_id_token(request, token)
            token['userinfo'] = userinfo
        return token

    def parse_id_token(self, request, token, claims_options=None, leeway=120):
        """Return an instance of UserInfo from token's ``id_token``.

        :param request: The Pyramid request.
        :param token: The token to parse.
        :param claims_options: Claims options for ``jwt.decode()``.
        :param leeway: The leeway to validate the claims. Defaults to 120.

        :return: ``UserInfo``
        """
        return self._parse_id_token(request, token, claims_options, leeway)


class OAuth(BaseOAuth):
    """A Pyramid-specific OAuth app."""

    framework_integration_cls = PyramidIntegration
    framework_client_cls = PyramidRemoteApp
